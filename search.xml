<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java String]]></title>
    <url>%2F2019%2F08%2F28%2FJava-String%2F</url>
    <content type="text"><![CDATA[StringString类创建 String s = new String(“abc”); char a[]={‘a’,’b’,’c’};String s = new String(a); char a[]={‘a’,’b’,’c’};String s =new String(a,2,4) 字符串连接+ 创建新的对象、增加内存开销 变化的string不推荐会用+操作 是不可变的对象 使用final 关键字修饰的字符数组 是线程安全的 字符串方法 获取长度 length() 定位字符串开始位置indexOf() 最后一个 lastIndexOF() 取字符 charAt(index) 获取（begin，end-1）的子字符串 substring(begin,end) 以某个字符开始 starsWith 以某个字符结束 endsWith 全部转为大写 toUpperCase 全部转为小写 toLowerCase 字符串内容相等 equals 字典序比较 compareTo 字符串分割(支持正则表达式) split() 字符串格式化 format(“xx%”,Object) 日期时间格式化 字符串替换 replace() 正则表达式 非[^456] 任意一个 [a~r] 任意字母[a-zA-Z] 或(并运算)[a-e[g-z]] 交运算[a-o&amp;&amp;[def]] 差运算[a-d&amp;&amp;[^bc]] 可变的String对象StringBuffer 可以更改，可以替代Sring类 一般生产环境中都用StringBuffer，确保线程安全 new StringBuffer(“chen”) 添加字符串 append(“robin”) 输出 chenrobin length() 长度 9 翻转 reverse 输出 nibornehc 插入 insert(4,”word”) 输出 niborWang setLength(3) nib delete(5,10) StringBuilder 不会增加内存开销 单线程，大量数据时，使用StringBuilder速度更快 append(“aa”) insert(5,”word”) delete(5,10) reverse() setLength() 区别 有公共的父类AbstractStringBuilder抽象类 StringBuilder并未对方法添加同步锁，线程不安全的 Stringbuffer添加了同步锁，或对调用的方法添加了同步锁，线程安全的 实现原理 提高字符串连接效率 采用一个char数组保存字符串,初始大小16 append动态扩容 每次固定扩容2倍，JNI方法System.arraycopy()]]></content>
      <categories>
        <category>java学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java string</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 基础知识]]></title>
    <url>%2F2019%2F08%2F28%2FJava-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[Java基础知识语言基础基本数据类型 boolean 包装类Boolean 数值类型 整型 byte 8位 short 16位 包装类Short int 32位 包装类Integer long 64位 包装类Long 字符 char 16位 包装类Character 浮点型 float 32位 包装类Float double 64位 包装类Double 主类结构 包 成员变量和局部变量 主方法 API类库 类型转换 自动类型转换 数值范围由小向大 表达式自动提升类型 强制类型转换 int b =10; int a = (short)b; 变量与常量运算符 三元运算符 表达式？true：false 位运算符 按位与&amp; 按 位或| 按位取反~ 按位异或^ 移位操作 左移&lt;&lt; 右移&gt;&gt; 无符号右移&gt;&gt;&gt; 自增++、自减– 逻辑运算 与&amp;&amp; 或|| 非! 代码注释及编码规范 // / / /* / 引用数据类型 类object 接口类型 数组类型 null类型 枚举类型 标注类型 数组String类与对象包装类数字处理Math类 数字格式化 小数形式0.001~10 000 000 科学计数法E’ DecimalFormat 数学运算方法 三角函数 指数函数 对数函数 平方根 随机数 math.random方法 (int)m+(int)(math.random()*n)产生m~m+n (char)a+(char)(math.random()*（b-a+1)产生a~b Random类 随机数种子 Random r = new Random(); 大数字运算 BigInteger大整数 基本数学运算 位运算 去相反数 绝对值 最大公约数 是否是素数 BigDecimal大小数 流程控制foreach]]></content>
      <categories>
        <category>java学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 核心知识]]></title>
    <url>%2F2019%2F08%2F28%2FJava-%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[Java核心多线程 并发、多线程机制：程序同时完成多件事情 Thread类继承方式使用 Runnable接口使用 线程的生命周期 出生 创建new Thread(） 就绪 t.start() 运行 等待 休眠 阻塞 死亡 线程同步 线程安全 HashMap线程不安全 异步的 currentHashmap可解决 HashTable线程安全 同步的 线程同步机制 同步块 synchronized(object){ //访问资源的代码块} 同步方法 在方法前加上修饰synchronized void 份（）{//访问资源的代码} 网络编程 应用层 TCP/IP协议 传输层 互联网层 网络层 TCP、UDP协议 TCP固接连接为基础 socket类编程 inteAddress类 ServerSocket类 服务器套接字，等待来自网络上的请求 聊天室 UDP无连接的通信协议 发送端 DatagramSocket创建套接字 DatagramPacket创建数据包 send 接收端 DatagramSocket创建套接字，接收端口 DatagramPacket创建字节组，接收数据包 receive 不断广播，同组的主机可随时接收数据包 224.0.0.0~224.255.255.255 端口、套接字 端口 提供多种服务 套接字Socket 将应用程序与端口连接起来 集合类 Collection List集合 ArrayList 异步的 动态数组 LinkedList 方法 get set Set集合 HashSet TreeSet 元素不可重复 方法 添加 add 删除 remove 查找 遍历 迭代器iterator() Map集合 Hashmap 效率更高 hash表实现 异步的，线程不安全 可接受空值null TreeMap 存在映射顺序 Map中的key对象有一定顺序 顺序输出时转换为Treemap 方法 put（key，value）添加 是否包含containsKey(key) get(key)返回指定可以的内容 keyset返回所有key的set集合 values值对象的collection集合 Dictionary类 HashTable 同步的，保证线程安全 不能为空值 Vector类 动态数组 同步的，线程安全的 单独的方法操作上是安全的 方法都使用了synchronized修饰 序列化 底层实现与ArrayList类似 JVM相关 内存分配 堆-分配对象 栈-线程的工作空间 方法区-静态方法，变量，常量池 操作计数器 垃圾回收机制 异常处理 异常类 当某个方法出现异常会创建一个异常对象 处理异常 当前方法中处理 向上抛出异常 捕捉异常 try{}catch(Exceptiontype e){} try中有异常，则后面的不会执行 catch后面的继续执行 自定义异常 throw抛出异常 throws抛出的错误信息 运行时异常 Throwable类的子类 常见异常 类型转换异常 未找到相应类异常‘’ 算数异常 数组下标越界异常 数组包含不兼容的值 操作数据库异常 空指针异常 字段未找到、方法未找到 字符串转数字异常 数组元素个数为负数异常 字符串索引异常 IO异常 不允许访问某类异常 newInstance创建实例，但类不允许实例化 文件已结束、文件未找到异常 枚举类型与泛型 枚举类型 将常量封装在类中或接口中，编译时检查 常量放在枚举类型中enum 优点 类型安全 紧凑有效的数据定义 可以和程序其他部分完美交互 运行效率高 泛型 解决类型安全问题，提供编译时安全检查 总结 泛型的参数必须是类类型，不可以是简单类型 参数可有多个 可使用extends限制泛型的类型 可使用通配符限定泛型的类型 输入输出 字节输入输出流 InputStream 字节输入流 Reader类 FileReader OutputStream Writer类 FileWriter 文件输入输出流 File类 获取文件基本信息 FileInputStream文件输入 FileoutputStream文件输出 缓存区输入输出 BufferedInputStream BufferedReader BufferedOutputStream BufferedWriter 缓存是IO的性能优化 数据输入输出流 DataInputStream DataOutputStream 不必关心数据类型 ZIP压缩输入输出流 ZipEntry类 ZipInpuStream ZipOutputStream 数据库操作 JDBC java.sql connection接口 Statement接口 preparedstatement drivermanager resultset 特点 安全性控制 并发控制 完整性控制 故障的发现和恢复 SQL语言 数据定义 create、alter 数据操纵 select、insert、 数据控制 grant、revoke 事务控制 commit、rollback]]></content>
      <categories>
        <category>java学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java核心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 必备知识]]></title>
    <url>%2F2019%2F08%2F28%2FJava-%E5%BF%85%E5%A4%87%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[Java必备知识JVM相关 内存模型与结构 垃圾回收原理，性能调优 class二进制字节码结构 class loader体系 class加载过程 实例创建过程 方法执行过程 Java运行 带package的类如何运行 各个路径 classpath java library path java运行主目录 java多线程 多线程实现和启动 callable与runnable syncrhoized’与reentranLock 线程池 集合框架 HashMap与HashTable HashMap 异步的，线程不安全 HashTable 同步的，线程安全 ArrayList与Vector ArrayList 异步的，线程不安全 三种迭代方式 foreach(str:list) 数组遍历for(i;i&lt;;++i) 使用迭代器while(itera.hasnext()) Vector 同步的，线程安全，单独的方法使用synicalized 动态数组 Collection集合，元素集合 抽象类 List、Set 和 Queue 具体实现类 ArrayList、LinkedList、HashSet、LinkedHashSet 集合是一个对象，可容纳其他对象的引用 比较器 Map图，键/值对 HashMap、LinkedHashMap Map遍历方式 for (String key : map.keySet()) Map.entrySet使用iterator遍历key和value Map.entrySet遍历key和value Map.values()遍历所有的value，但不能遍历keyjava.util其他类 Vector Stack 默认的扩容方式是原来的2倍 Dictionary Hashtable Properties 持久的属性集 BitSet 存储位值，数组随需要增加 Java序列化 一个对象可被表示为一个字节序列，包含对象的数据、有关对象的类型信息和存储在对象中的数据的类型 反序列化，JVM独立的 在任何平台上均可反序列化]]></content>
      <categories>
        <category>Java 学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java 基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F08%2F28%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 学习]]></title>
    <url>%2F2019%2F08%2F28%2FJava-%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js学习]]></title>
    <url>%2F2019%2F05%2F13%2Fjs%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[js基础知识 js包括的内容 ES标准 （制定了js的基本语法{语句、运算符、表达式}，内置的对象{Array、String、Date、Math}）DOM （HTML、XML 能够操作DOM的不仅仅是js，还包括了JAVA、PHP、Python等语言）BOM （浏览器访问对象，包括了弹出框等）应用领域 （验证表单–&gt; 特效交互–&gt; 数据交互{Ajax}–&gt; 游戏开发{canvas}–&gt; 桌面应用、移动应用、小程序等） js基本语法 变量var 获取元素getElementById、querySelector(CSS3.0)、querySelectorAll(css3.0)、 console.log 事件onclick、onmouseover、onmouseout、事件里的 this ，指向触发事件的对象 123object.onclick = function()&#123; // 具体执行 &#125; this一般用在函数内部，指向事件的对象]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[websocket学习]]></title>
    <url>%2F2019%2F05%2F12%2Fwebsocket%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[First blog]]></title>
    <url>%2F2019%2F05%2F12%2FFirst-blog%2F</url>
    <content type="text"><![CDATA[写博客（新建） 使用hexo new “文章名” title: Java 学习 copyright: true date: 2019-08-28 15:50:11 categories: description: tags: 写内容：支持markdown语法（很好用），只需要定义格式，其余的自动布局 先清除 使用hexo clean 再进行编译 hexo generator 最后进行发布 上传到github博客上 hexo deploy 本地运行 hexo server 紧接着是文章的正文部分]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Firstblog]]></title>
    <url>%2F2019%2F05%2F12%2FFirstblog%2F</url>
    <content type="text"><![CDATA[写博客（新建） 使用hexo new “文章名” title: Java 学习 copyright: true date: 2019-08-28 15:50:11 categories: description: tags: 写内容：支持markdown语法（很好用），只需要定义格式，其余的自动布局 先清除 使用hexo clean 再进行编译 hexo generator 最后进行发布 上传到github博客上 hexo deploy 本地运行 hexo server 紧接着是文章的正文部分]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello 2018]]></title>
    <url>%2F2018%2F07%2F18%2FHello-2018%2F</url>
    <content type="text"><![CDATA[“🙉🙉🙉 ” 前言BY 的 Blog 就这么开通了。 本来打算在年前完成 Blog 的搭建，不曾料想踩了很多坑。。。 跳过废话，直接看技术实现 2018 年暑假，BY Blog 总算是搭建好了。 最开始写博客是在简书这个平台上，简书确实不错，支持markdown在线编辑。 在一次偶然间，听到我的好基友 阳阳 想搭建个人主页，觉得作为一个程序员，是应该倒腾倒腾自己的Blog，于是乎就开始了撸起袖子干了。 正文接下来说说搭建这个博客的技术细节。 正好之前就有关注过 GitHub Pages + Jekyll 快速 Building Blog 的技术方案，非常轻松时尚。 其优点非常明显： Markdown 带来的优雅写作体验 非常熟悉的 Git workflow ，Git Commit 即 Blog Post 利用 GitHub Pages 的域名和免费无限空间，不用自己折腾主机 如果需要自定义域名，也只需要简单改改 DNS 加个 CNAME 就好了 Jekyll 的自定制非常容易，基本就是个模版引擎 主题我直接 Downlosd 了 Hux的博客主题 的进行修改，简单粗暴，不过遇到了很多坑😂，好在都填完了。。。 本地调试环境需要 gem install jekyll，结果 rubygem 的源居然被墙了，后来手动改成了我大淘宝的镜像源才成功，淘宝的源已经停止维护，换成了OSChina的源 https://gems.ruby-china.org/。 后记最后，感谢 Hux 提供的的 Blog 主题 如果你恰好逛到了这里，希望你也能喜欢这个博客主题，感兴趣的话可以自己动手搭建一个。 —— BY 后记于 2018.07]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
</search>
